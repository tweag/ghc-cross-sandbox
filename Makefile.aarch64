
NATIVE_GHC_HOME := $(shell dirname $$(dirname $$(command -v ghc)))
GHC_CROSS := aarch64-unknown-linux-gnu-ghc -pgmi $(NATIVE_GHC_HOME)/lib/ghc-8.8.3/bin/ghc-iserv
GHC_PKG_CROSS := aarch64-unknown-linux-gnu-ghc-pkg
GCC_CROSS := aarch64-unknown-linux-gnu-gcc
AR_CROSS := aarch64-unknown-linux-gnu-ar
GHC_NATIVE := ghc -outputdir native

# When compiling files with TH, we tell GHC to use the packages in the
# global database of the native compiler. This causes TH splices to load
# the native packages to run the splices in the build platform.
#
# There is no danger of linking these libraries in the final executable
# because we don't use these flags in the link step.
CROSS_TH_FLAGS := -fexternal-interpreter -package-db $(NATIVE_GHC_HOME)/lib/ghc-8.8.3/package.conf.d

a-cross.out: target/Main.o target/A.o target/B.o target/C.o target/D.o target/E.o target/F.o target/cdep.o hsdep-cross/libHShsdep-0.1.a
	$(GHC_CROSS) target/Main.o target/A.o target/B.o target/C.o target/D.o target/E.o target/F.o target/cdep.o hsdep-cross/libHShsdep-0.1.a -o a-cross.out

# This rule uses an auxiliary directory for reading and writing .o files.
# We can only chose one directory for this purpose and neither native nor target
# are good choices.
#
# native is only intended for x86_64 object files. The output of the
# cross compiler shouldn't go here.
#
# target is only intended for aarch64 object files. The compiler won't
# find here the native object files that it needs for running template
# haskell splices.
#
# The solution is to just use a temporary folder with the object files
# that this rule needs and produces. The rule for target/D.o does something
# similar.
#
# LD_LIBRARY_PATH is necessary because iserv doesn't know where to find
# libHShsdepth-0.1.so otherwise. Additionally, we don't know why it wants
# to load libHShsdepth-0.1.so instead of libHShsdepth-0.1-ghc8.3.3.so.
# The rule for target/A.o is affected in a similar way.
target/Main.o target/Main.hi: target/A.hi target/B.hi target/D.hi target/E.hi target/F.hi native/G.hi native/G.dyn_o Main.hs hsdepth/pkgdb hsdepth/HsDepTH.hi hsdepth/libHShsdepth-0.1.so
	mkdir -p buildMain && cp native/G.* buildMain
	LD_LIBRARY_PATH=$(PWD)/hsdepth $(GHC_CROSS) -c Main.hs -package-db hsdepth/pkgdb -itarget -inative $(CROSS_TH_FLAGS) -outputdir buildMain
	cp buildMain/Main.* target

# We need both the .hi and the shared library when using the dependency in TH.
target/A.o target/A.hi: hsdep/HsDep.hi hsdep/libHShsdep-0.1-ghc8.8.3.so hsdep/libHShsdep-0.1.so A.hs hsdep/pkgdb
	LD_LIBRARY_PATH=$(PWD)/hsdep $(GHC_CROSS) -c A.hs -package-db hsdep/pkgdb $(CROSS_TH_FLAGS) -outputdir target

# When not using the dependency for running TH splices,
# we don't need the shared library to compile.
target/B.o target/B.hi: hsdep/HsDep.hi B.hs target/C.hi hsdep/pkgdb
	$(GHC_CROSS) -c B.hs -package-db hsdep/pkgdb $(CROSS_TH_FLAGS) -itarget -outputdir target

# We don't need to pass cdep.o when building a module that
# refers to it.
target/C.o target/C.hi: C.hs
	$(GHC_CROSS) -c C.hs -dynamic-too -outputdir target

native/C.o native/C.hi: C.hs
	$(GHC_NATIVE) -c C.hs -dynamic-too

# We need to pass cdep.o when building so ghc can load
# it for running TH splices.
#
# See the note for rule target/Main.o to learn about the
# use of the auxiliary directory buildD.
target/D.o target/D.hi: D.hs native/C.hi native/cdep.o
	mkdir -p buildD && cp native/C.* buildD
	$(GHC_CROSS) -c D.hs native/cdep.o $(CROSS_TH_FLAGS) -ibuildD -outputdir buildD
	cp buildD/D.* target

# We don't need cdep.o if TH splices don't need it
target/E.o target/E.hi: E.hs target/C.hi
	$(GHC_CROSS) -c E.hs $(CROSS_TH_FLAGS) -itarget -outputdir target

# We only need the interface file if TH doesn't use the dependency
target/F.o target/F.hi: hsdep/HsDep.hi F.hs hsdep/pkgdb
	$(GHC_CROSS) -c F.hs -package-db hsdep/pkgdb $(CROSS_TH_FLAGS) -outputdir target

# G is needed for compiling Main, but not for linking it.
native/G.o native/G.hi native/G.dyn_o native/G.dyn_hi: G.hs
	$(GHC_NATIVE) -c -dynamic-too G.hs

native/cdep.o: cdep.c
	gcc -c cdep.c -o native/cdep.o

target/cdep.o: cdep.c
	$(GCC_CROSS) -c cdep.c -o target/cdep.o


# haskell dependencies

hsdep/pkgdb:
	mkdir hsdep/pkgdb
	./cat-hsdep-info.sh > hsdep/pkgdb/hsdep-0.1.conf
	ghc-pkg recache --package-db hsdep/pkgdb

hsdep/libHShsdep-0.1.a: hsdep/HsDep.o
	ar cqs hsdep/libHShsdep-0.1.a hsdep/HsDep.o

hsdep/libHShsdep-0.1.so: hsdep/libHShsdep-0.1-ghc8.8.3.so
	ln -rs hsdep/libHShsdep-0.1-ghc8.8.3.so hsdep/libHShsdep-0.1.so

hsdep/libHShsdep-0.1-ghc8.8.3.so: hsdep/HsDep.dyn_o
	ghc -shared -dynamic -o hsdep/libHShsdep-0.1-ghc8.8.3.so hsdep/HsDep.dyn_o

hsdep/HsDep.dyn_hi hsdep/HsDep.dyn_o hsdep/HsDep.hi hsdep/HsDep.o: hsdep/HsDep.hs
	ghc -c -dynamic-too -this-unit-id hsdep-0.1 hsdep/HsDep.hs -dynhisuf dyn_hi -dynosuf dyn_o

hsdep-cross/pkgdb:
	mkdir hsdep-cross/pkgdb
	./cat-hsdep-info.sh > hsdep-cross/pkgdb/hsdep-0.1.conf
	$(GHC_PKG_CROSS) recache --package-db hsdep-cross/pkgdb

hsdep-cross/libHShsdep-0.1.a: hsdep-cross/HsDep.o
	$(AR_CROSS) cqs hsdep-cross/libHShsdep-0.1.a hsdep-cross/HsDep.o

hsdep-cross/HsDep.hi hsdep-cross/HsDep.o: hsdep-cross/HsDep.hs
	$(GHC_CROSS) -c -this-unit-id hsdep-0.1 hsdep-cross/HsDep.hs

hsdep-cross/HsDep.hs: hsdep/HsDep.hs
	mkdir -p hsdep-cross && cp hsdep/HsDep.hs hsdep-cross

hsdepth/pkgdb:
	mkdir hsdepth/pkgdb
	./cat-hsdepth-info.sh > hsdepth/pkgdb/hsdepth-0.1.conf
	ghc-pkg recache --package-db hsdepth/pkgdb

# hsdepth is needed for compiling Main, but not for linking it.
hsdepth/libHShsdepth-0.1.a: hsdepth/HsDepTH.o
	ar cqs hsdepth/libHShsdepth-0.1.a hsdepth/HsDepTH.o

hsdepth/libHShsdepth-0.1-ghc8.8.3.so: hsdepth/HsDepTH.dyn_o
	ghc -shared -dynamic -o hsdepth/libHShsdepth-0.1-ghc8.8.3.so hsdepth/HsDepTH.dyn_o

hsdepth/libHShsdepth-0.1.so: hsdepth/libHShsdepth-0.1-ghc8.8.3.so
	ln -rs hsdepth/libHShsdepth-0.1-ghc8.8.3.so hsdepth/libHShsdepth-0.1.so

hsdepth/HsDepTH.dyn_hi hsdepth/HsDepTH.dyn_o hsdepth/HsDepTH.hi hsdepth/HsDepTH.o:
	ghc -c -dynamic-too -this-unit-id hsdepth-0.1 hsdepth/HsDepTH.hs -dynhisuf dyn_hi -dynosuf dyn_o


clean:
	rm -rf *.o *.hi *.so *.dyn_hi *.dyn_o a-cross.out
	rm -rf hsdep/*.o hsdep/*.hi hsdep/*.so hsdep/*.a hsdep/*.dyn_hi hsdep/*.dyn_o hsdep/pkgdb
	rm -rf hsdepth/*.o hsdepth/*.hi hsdepth/*.so hsdepth/*.a hsdepth/*.dyn_hi hsdepth/*.dyn_o hsdepth/pkgdb
	rm -rf native/* target/* buildD buildMain hsdep-cross
